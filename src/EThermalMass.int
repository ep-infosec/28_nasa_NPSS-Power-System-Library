/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                     |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     EThermalMass.int                                             |
 | Author(s):     George Thomas                                                |
 | Date(s):       February 2020                                                |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

#ifndef __E_THERMAL_MASS__
#define __E_THERMAL_MASS__

#include <InterpIncludes.ncp>

class EThermalMass extends Subelement {

  extern real Q_I.HeatTransferRate;
  extern real Q_I.MassTemp;
  extern real Q_heat;
  extern real Mass;

  //----------------------------
  // ****** DOCUMENTATION ******
  //----------------------------  

  // title = "";

  description = "The " + isA() + " subelement performs a simple set of calculations to represent the thermal mass " +
  "(temperature dynamics) of an electrical component. This subelement is intended to be incorporated in an appropriate " +
  "socket within the electrical component and interfaces the component to a thermal management system via a thermal " +
  "port that must live within the electrical component.";

  usageNotes = isA() +
  "\n" +
  "- Parent component must have a thermal port.\n\n" +
  "- Parent component must also have a Q_heat variable that contains the " +
  "heat generated within the component at the given timestep.\n\n" +
  "- The component temperature is calculated with a solver independent
  integrator pair.";

  // background = "";

  //------------------------------
  // ****** SETUP VARIABLES ******
  //------------------------------

  real Q_in {
    value = 0;  IOstatus = INPUT;  units = "Btu/sec";
    description = "Input Q dissipated within electrical device.";
  }
  
  real Q_out {
    value = 0;  IOstatus = INPUT;  units = "Btu/sec";
    description = "Heat flow out of this device, going into the cooling medium.";
  }

  real Q_net {
    value = 0;  IOstatus = INPUT;  units = "Btu/sec";
    description = "Net heat flow through this device.";
  }

  real Cp {
    value = 0;  IOstatus = INPUT;  units = "Btu/(lbm*R)";
    description = "Component lumped Cp (specific heat).";
  }

  real dTqdt {
    value = 0;  IOstatus = OUTPUT;  units = "1/sec";
    description = "Temperature time derivative.";
  }
  
  real T {
    value = 518.67;  IOstatus = INPUT; units = "R";
    description = "Temperature.";
    trigger = 1;
  }

  //-----------------------------------------------------
  // ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
  //-----------------------------------------------------

  Independent ind_T {
    varName = "T";
    autoSetup = TRUE;
    description = "Varies the material temperature.";
  }

  Integrator integ_T {
    stateName = "T";
    derivativeName = "dTqdt";
    // eq_lhs = "Q_in";
    eq_lhs = "Q_heat";
    // eq_rhs = "Q_out";
    eq_rhs = "Q_I.HeatTransferRate";
    tolerance = 0.01;
    autoSetup = TRUE;
    description = "Balances the heat flows.";
  }

  //-------------------------------------------
  // ****** VARIABLE CHANGED METHODOLOGY ******
  //-------------------------------------------

  void variableChanged(string name, any oldVal) {

    // if the temperature is being set, push it to the port
    if ( name == "T" ) {
      Q_I.MassTemp = T;
    }

    if (name == "solutionMode") {
      if (solutionMode == "TRANSIENT") {
        ind_T.autoSetup = TRUE;
        integ_T.autoSetup = TRUE;
        initializeHistory();
      } else {
        ind_T.autoSetup = FALSE;
        integ_T.autoSetup = FALSE;	
      }
    }
  }

  //------------------------------------
  // ****** OPTION VARIABLE SETUP ******
  //------------------------------------

  Option solutionMode {
    allowedValues = { STEADY_STATE, ONE_PASS, TRANSIENT } ;
    description = "Solver solution switch.";
    rewritableValues = FALSE;  // Enables converter optimization.
  }

  //-----------------------------------------------
  // ****** PERFORM ENGINEERING CALCULATIONS ******
  //-----------------------------------------------

  void calculate() {

    // get local copy of Q_in and Q_out
    Q_in  = Q_heat;
    Q_out = Q_I.HeatTransferRate;

    // determine the net heat flow
    Q_net = Q_in - Q_out;
    
    // Determine the temperature derivative
    dTqdt = Q_net /( Mass*Cp );
  }
}
#endif
